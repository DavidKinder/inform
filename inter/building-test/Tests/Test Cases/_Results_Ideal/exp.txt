Test: parse schema from:
	alpha.beta()

0002   * (message)
0002       * (expr)
0002         IDENTIFIER  alpha
0002       * (expr)
0002         IDENTIFIER  beta
=========
Test: parse schema from:
	alpha.beta(x)

0002   * (message)
0002       * (expr)
0002         IDENTIFIER  alpha
0002       * (expr)
0002         IDENTIFIER  beta
0002       * (expr)
0002         IDENTIFIER  x
=========
Test: parse schema from:
	routine.call(x)

0002   * (call-message)
0002       * (expr)
0002         IDENTIFIER  routine
0002       * (expr)
0002         IDENTIFIER  x
=========
Test: parse schema from:
	(alpha.beta)(x)

0002   * (call)
0002       * (subexpression)
0002           * (operation) !propertyvalue
0002               * (expr)
0002                 IDENTIFIER  alpha
0002               * (expr)
0002                 IDENTIFIER  beta
0002       * (expr)
0002         IDENTIFIER  x
=========
Test: parse schema from:
	debug_rules = 2; say__p = 1;
	"Rules tracing now switched to ~all~. Type ~rules off~ to switch it off again.";

0001   * (operation) !store
0001       * (expr)
0001         IDENTIFIER  debug_rules
0001       * (expr)
0001         NUMBER      2
0001   * (operation) !store
0001       * (expr)
0001         IDENTIFIER  say__p
0002       * (expr)
0002         NUMBER      1
0002   * (expr) ;
0002     DQUOTED     Rules tracing now switched to "all". Type "rules off" to switch it off again.
=========
Test: parse schema from:
	@erase_window -1;

0001   * (assembly)
0001       * (expr)
0001         OPCODE      @erase_window
0002       * (expr)
0002         NUMBER      -1
=========
Test: parse schema from:
	restore Somewhere;
	.Somewhere; print "Here!";

0001   * (statement) !restore
0001       * (expr)
0001         IDENTIFIER  Somewhere
0002   * (label)
0002       * (expr)
0002         IDENTIFIER  Somewhere
0002   * (statement) !print
0002       * (expr)
0002         DQUOTED     Here!
=========
Test: parse schema from:
	"Hello, this
	is a multiline string literal";

0002   * (expr) ;
0002     DQUOTED     Hello, this is a multiline string literal
=========
Test: parse schema from:
	for (n=0:((n<RE_Subexpressions-->10) && (n<10)): n++)
		print n;

0001   * (statement) !for
0001       * (eval)
0001           * (operation) !store
0001               * (expr)
0001                 IDENTIFIER  n
0001               * (expr)
0001                 NUMBER      0
0001       * (eval)
0001           * (subexpression)
0001               * (operation) !and
0001                   * (subexpression)
0001                       * (operation) !lt
0001                           * (expr)
0001                             IDENTIFIER  n
0001                           * (operation) !lookup
0001                               * (expr)
0001                                 IDENTIFIER  RE_Subexpressions
0001                               * (expr)
0001                                 NUMBER      10
0001                   * (subexpression)
0001                       * (operation) !lt
0001                           * (expr)
0001                             IDENTIFIER  n
0001                           * (expr)
0001                             NUMBER      10
0001       * (eval)
0001           * (operation) !postincrement
0002               * (expr)
0002                 IDENTIFIER  n
0002       * (code)
0002           * (statement) !printnumber
0002               * (expr)
0002                 IDENTIFIER  n
=========
Test: parse schema from:
	spaces j;
	print (I7_string) str; 

0001   * (statement) !spaces
0001       * (expr)
0001         IDENTIFIER  j
0002   * (call)
0002       * (expr)
0002         IDENTIFIER  I7_String
0002       * (expr)
0002         IDENTIFIER  str
=========
Test: parse schema from:
	if (i == 1) print "Okay";
	else "*** Arrcpy doesn't support this ***";

0001   * (statement) !ifelse
0001       * (subexpression)
0001           * (operation) !eq
0001               * (expr)
0001                 IDENTIFIER  i
0001               * (expr)
0001                 NUMBER      1
0001       * (code)
0001           * (statement) !print
0001               * (expr)
0001                 DQUOTED     Okay
0002       * (code)
0002           * (expr) ;
0002             DQUOTED     *** Arrcpy doesn't support this ***
=========
Test: parse schema from:
	a-1

0002   * (operation) !minus
0002       * (expr)
0002         IDENTIFIER  a
0002       * (expr)
0002         NUMBER      1
=========
Test: parse schema from:
	do {
		print "Hi!";
	} until (x);

0001   * (statement) !do
0001       * (subexpression)
0004           * (expr)
0004             IDENTIFIER  x
0002       * (code)
0002           * (statement) !print
0002               * (expr)
0002                 DQUOTED     Hi!
=========
Test: parse schema from:
    do {
        if (a) return wd;
    } until (a);

0001   * (statement) !do
0001       * (subexpression)
0004           * (expr)
0004             IDENTIFIER  a
0002       * (code)
0002           * (statement) !if
0002               * (subexpression)
0002                   * (expr)
0002                     IDENTIFIER  a
0002               * (code)
0002                   * (statement) !return
0002                       * (expr)
0002                         IDENTIFIER  wd
=========
Test: parse schema from:
    do {
        if (line_tdata-->index == wd) return wd;
        index++;
    } until ((line_token-->index == ENDIT_TOKEN) || (((line_token-->index)->0 & $10) == 0));

0001   * (statement) !do
0001       * (subexpression)
0004           * (operation) !or
0004               * (subexpression)
0004                   * (operation) !eq
0004                       * (operation) !lookup
0004                           * (expr)
0004                             IDENTIFIER  line_token
0004                           * (expr)
0004                             IDENTIFIER  index
0004                       * (expr)
0004                         IDENTIFIER  ENDIT_TOKEN
0004               * (subexpression)
0004                   * (operation) !eq
0004                       * (subexpression)
0004                           * (operation) !bitwiseand
0004                               * (operation) !lookupbyte
0004                                   * (subexpression)
0004                                       * (operation) !lookup
0004                                           * (expr)
0004                                             IDENTIFIER  line_token
0004                                           * (expr)
0004                                             IDENTIFIER  index
0004                                   * (expr)
0004                                     NUMBER      0
0004                               * (expr)
0004                                 HEX_NUMBER  $10
0005                       * (expr)
0005                         NUMBER      0
0002       * (code)
0002           * (statement) !if
0002               * (subexpression)
0002                   * (operation) !eq
0002                       * (operation) !lookup
0002                           * (expr)
0002                             IDENTIFIER  line_tdata
0002                           * (expr)
0002                             IDENTIFIER  index
0002                       * (expr)
0002                         IDENTIFIER  wd
0002               * (code)
0002                   * (statement) !return
0002                       * (expr)
0002                         IDENTIFIER  wd
0002           * (operation) !postincrement
0004               * (expr)
0004                 IDENTIFIER  index
=========
Test: parse schema from:
    print "<string ~", (string) o, "~>"; 

0001   * (statement) !print
0001       * (expr)
0001         DQUOTED     <string "
0001   * (statement) !printstring
0001       * (expr)
0001         IDENTIFIER  o
0001   * (statement) !print
0001       * (expr)
0001         DQUOTED     ">
=========
Test: parse schema from:
    switch (Y) {
		X:   print "A ", (string) o;
    }

0001   * (statement) !switch
0001       * (subexpression)
0001           * (expr)
0001             IDENTIFIER  Y
0002       * (code)
0002           * (statement) !case
0002               * (expr)
0002                 IDENTIFIER  X
0002               * (code)
0002                   * (statement) !print
0002                       * (expr)
0002                         DQUOTED     A 
0002                   * (statement) !printstring
0002                       * (expr)
0002                         IDENTIFIER  o
=========
Test: parse schema from:
	#ifdef RANKING_TABLE;
	ANNOUNCE_SCORE_RM('B');
	j = TableRows(RANKING_TABLE);
	for (i=j:i>=1:i--)
		if (score >= TableLookUpEntry(RANKING_TABLE, 1, i)) {
		    v = TableLookUpEntry(RANKING_TABLE, 2, i);
		    TEXT_TY_Say(v);
		    ".";
		}
	#endif;
	".";'

0001   * (directive) #ifdef
0001       * (expr)
0001         IDENTIFIER  RANKING_TABLE
0002   * (call)
0002       * (expr)
0002         IDENTIFIER  ANNOUNCE_SCORE_RM
0002       * (expr)
0002         SQUOTED     B
0003   * (operation) !store
0003       * (expr)
0003         IDENTIFIER  j
0004       * (call)
0004           * (expr)
0004             IDENTIFIER  TableRows
0004           * (expr)
0004             IDENTIFIER  RANKING_TABLE
0004   * (statement) !for
0005       * (eval)
0005           * (operation) !store
0005               * (expr)
0005                 IDENTIFIER  i
0005               * (expr)
0005                 IDENTIFIER  j
0005       * (eval)
0005           * (operation) !ge
0005               * (expr)
0005                 IDENTIFIER  i
0005               * (expr)
0005                 NUMBER      1
0005       * (eval)
0005           * (operation) !postdecrement
0005               * (expr)
0005                 IDENTIFIER  i
0005       * (code)
0005           * (statement) !if
0005               * (subexpression)
0005                   * (operation) !ge
0005                       * (expr)
0005                         IDENTIFIER  score
0005                       * (call)
0005                           * (expr)
0005                             IDENTIFIER  TableLookUpEntry
0005                           * (expr)
0005                             IDENTIFIER  RANKING_TABLE
0005                           * (expr)
0005                             NUMBER      1
0005                           * (expr)
0005                             IDENTIFIER  i
0006               * (code)
0006                   * (operation) !store
0006                       * (expr)
0006                         IDENTIFIER  v
0006                       * (call)
0006                           * (expr)
0006                             IDENTIFIER  TableLookUpEntry
0006                           * (expr)
0006                             IDENTIFIER  RANKING_TABLE
0006                           * (expr)
0006                             NUMBER      2
0007                           * (expr)
0007                             IDENTIFIER  i
0007                   * (call)
0008                       * (expr)
0008                         IDENTIFIER  TEXT_TY_Say
0008                       * (expr)
0008                         IDENTIFIER  v
0008                   * (expr) ;
0008                     DQUOTED     .
0005   * (directive) #endif
0011   * (expr) ;
0011     DQUOTED     .
0011   * (expr)
0011     SQUOTED     

=========
Test: parse schema from:
	if (B) if (A) { print "Yes"; }
	print "No";

0001   * (statement) !if
0001       * (subexpression)
0001           * (expr)
0001             IDENTIFIER  B
0001       * (code)
0001           * (statement) !if
0001               * (subexpression)
0001                   * (expr)
0001                     IDENTIFIER  A
0001               * (code)
0001                   * (statement) !print
0001                       * (expr)
0001                         DQUOTED     Yes
0001   * (statement) !print
0002       * (expr)
0002         DQUOTED     No
=========
Test: parse schema from:
	switch (scope_stage) {
		2: objectloop (obj)
        	PlaceInScope(obj, true);
    }

0001   * (statement) !switch
0001       * (subexpression)
0001           * (expr)
0001             IDENTIFIER  scope_stage
0002       * (code) <
0002           * (statement) !case
0002               * (expr)
0002                 NUMBER      2
0002               * (code) <
0002                   * (statement) !objectloop
0002                       * (subexpression)
0003                           * (expr)
0003                             IDENTIFIER  obj
0003                       * (code)
0003                           * (call)
0003                               * (expr)
0003                                 IDENTIFIER  PlaceInScope
0003                               * (expr)
0003                                 IDENTIFIER  obj
0004                               * (expr)
0004                                 NUMBER      true
=========
Test: parse schema from:
	while (token ~= NULL) {
		switch (token-->RE_CCLASS) {
			DISJUNCTION_RE_CC: token-->RE_CONSTRAINT = -1;
			QUANTIFIER_RE_CC: token-->RE_CONSTRAINT = -1;
		}
		if (token-->RE_DOWN) TEXT_TY_RE_EraseConstraints(token-->RE_DOWN);
		token = token-->RE_NEXT;
	}

0001   * (statement) !while
0001       * (subexpression)
0001           * (operation) !ne
0001               * (expr)
0001                 IDENTIFIER  token
0001               * (expr)
0001                 IDENTIFIER  NULL
0002       * (code)
0002           * (statement) !switch
0002               * (subexpression)
0002                   * (operation) !lookup
0002                       * (expr)
0002                         IDENTIFIER  token
0002                       * (expr)
0002                         IDENTIFIER  RE_CCLASS
0003               * (code)
0003                   * (statement) !case
0003                       * (expr)
0003                         IDENTIFIER  DISJUNCTION_RE_CC
0003                       * (code)
0003                           * (operation) !store
0003                               * (operation) !lookup
0003                                   * (expr)
0003                                     IDENTIFIER  token
0003                                   * (expr)
0003                                     IDENTIFIER  RE_CONSTRAINT
0004                               * (expr)
0004                                 NUMBER      -1
0004                   * (statement) !case
0004                       * (expr)
0004                         IDENTIFIER  QUANTIFIER_RE_CC
0004                       * (code)
0004                           * (operation) !store
0004                               * (operation) !lookup
0004                                   * (expr)
0004                                     IDENTIFIER  token
0004                                   * (expr)
0004                                     IDENTIFIER  RE_CONSTRAINT
0005                               * (expr)
0005                                 NUMBER      -1
0003           * (statement) !if
0006               * (subexpression)
0006                   * (operation) !lookup
0006                       * (expr)
0006                         IDENTIFIER  token
0006                       * (expr)
0006                         IDENTIFIER  RE_DOWN
0007               * (code)
0007                   * (call)
0007                       * (expr)
0007                         IDENTIFIER  TEXT_TY_RE_EraseConstraints
0007                       * (operation) !lookup
0007                           * (expr)
0007                             IDENTIFIER  token
0007                           * (expr)
0007                             IDENTIFIER  RE_DOWN
0007           * (operation) !store
0007               * (expr)
0007                 IDENTIFIER  token
0008               * (operation) !lookup
0008                   * (expr)
0008                     IDENTIFIER  token
0008                   * (expr)
0008                     IDENTIFIER  RE_NEXT
=========
Test: parse schema from:
		if (b) print 1; else print 2;

0001   * (statement) !ifelse
0001       * (subexpression)
0001           * (expr)
0001             IDENTIFIER  b
0001       * (code)
0001           * (statement) !printnumber
0001               * (expr)
0001                 NUMBER      1
0001       * (code)
0001           * (statement) !printnumber
0001               * (expr)
0001                 NUMBER      2
=========
Test: parse schema from:
		a: if (b) print 1; else print 2;

0001   * (statement) !case
0001       * (expr)
0001         IDENTIFIER  a
0001       * (code) <
0001           * (statement) !ifelse
0001               * (subexpression)
0001                   * (expr)
0001                     IDENTIFIER  b
0001               * (code)
0001                   * (statement) !printnumber
0001                       * (expr)
0001                         NUMBER      1
0001               * (code)
0001                   * (statement) !printnumber
0001                       * (expr)
0001                         NUMBER      2
=========
Test: parse schema from:
	print_ret "This is ", (char) X, ".";

0001   * (statement) !print
0001       * (expr)
0001         DQUOTED     This is 
0001   * (statement) !printchar
0001       * (expr)
0001         IDENTIFIER  X
0001   * (statement) !print
0001       * (expr)
0001         DQUOTED     .
0001   * (statement) !print
0001       * (expr)
0001         DQUOTED     

0001   * (statement) !return
0001       * (expr)
0001         NUMBER      1
=========
Test: parse schema from:
	@jl y 0 ?X;
	@jl y 0 ?~X;
	@jl y 0 ?rtrue;
	@jl y 0 ?rfalse;
	@jl y 0 ?~rtrue;
	@jl y 0 ?~rfalse;

0001   * (assembly)
0001       * (expr)
0001         OPCODE      @jl
0001       * (expr)
0001         IDENTIFIER  y
0001       * (expr)
0001         NUMBER      0
0002       * (expr)
0002         ASM_LABEL   X
0002   * (assembly)
0002       * (expr)
0002         OPCODE      @jl
0002       * (expr)
0002         IDENTIFIER  y
0002       * (expr)
0002         NUMBER      0
0003       * (expr)
0003         NEGASM_LABEL X
0003   * (assembly)
0003       * (expr)
0003         OPCODE      @jl
0003       * (expr)
0003         IDENTIFIER  y
0003       * (expr)
0003         NUMBER      0
0004       * (expr)
0004         ASM_LABEL   rtrue
0004   * (assembly)
0004       * (expr)
0004         OPCODE      @jl
0004       * (expr)
0004         IDENTIFIER  y
0004       * (expr)
0004         NUMBER      0
0005       * (expr)
0005         ASM_LABEL   rfalse
0005   * (assembly)
0005       * (expr)
0005         OPCODE      @jl
0005       * (expr)
0005         IDENTIFIER  y
0005       * (expr)
0005         NUMBER      0
0006       * (expr)
0006         NEGASM_LABEL rtrue
0006   * (assembly)
0006       * (expr)
0006         OPCODE      @jl
0006       * (expr)
0006         IDENTIFIER  y
0006       * (expr)
0006         NUMBER      0
0007       * (expr)
0007         NEGASM_LABEL rfalse
=========
Test: parse schema from:
		switch (token-->RE_CCLASS) {
			
			! Should never happen
			
			CHOICE_RE_CC: return "internal error";
			
			! Mode switches
			
			SENSITIVITY_RE_CC:
				if (token-->RE_PAR1) mode_flags = mode_flags | CIS_MFLAG;
				else mode_flags = mode_flags & (~CIS_MFLAG);
				outcome = true;
		
			! Zero-length positional markers
			
			ALWAYS_RE_CC:
				outcome = true;
			NEVER_RE_CC:
			START_RE_CC:
				if (ipos == 0) outcome = true;
			END_RE_CC:
				if (BlkValueRead(txt, ipos) == 0) outcome = true;
			SOMETIMES_RE_CC:
				outcome = true;
		}

0001   * (statement) !switch
0001       * (subexpression)
0001           * (operation) !lookup
0001               * (expr)
0001                 IDENTIFIER  token
0001               * (expr)
0001                 IDENTIFIER  RE_CCLASS
0002       * (code)
0002           * (statement) !case
0005               * (expr)
0005                 IDENTIFIER  CHOICE_RE_CC
0005               * (code)
0005                   * (statement) !return
0005                       * (expr)
0005                         DQUOTED     internal error
0006           * (statement) !case
0010               * (expr)
0010                 IDENTIFIER  SENSITIVITY_RE_CC
0010               * (code)
0010                   * (statement) !ifelse
0010                       * (subexpression)
0010                           * (operation) !lookup
0010                               * (expr)
0010                                 IDENTIFIER  token
0010                               * (expr)
0010                                 IDENTIFIER  RE_PAR1
0010                       * (code)
0010                           * (operation) !store
0010                               * (expr)
0010                                 IDENTIFIER  mode_flags
0010                               * (operation) !bitwiseor
0010                                   * (expr)
0010                                     IDENTIFIER  mode_flags
0011                                   * (expr)
0011                                     IDENTIFIER  CIS_MFLAG
0011                       * (code)
0011                           * (operation) !store
0011                               * (expr)
0011                                 IDENTIFIER  mode_flags
0011                               * (operation) !bitwiseand
0011                                   * (expr)
0011                                     IDENTIFIER  mode_flags
0012                                   * (subexpression)
0012                                       * (operation) !bitwisenot
0012                                           * (expr)
0012                                             IDENTIFIER  CIS_MFLAG
0011                   * (operation) !store
0012                       * (expr)
0012                         IDENTIFIER  outcome
0013                       * (expr)
0013                         NUMBER      true
0013           * (statement) !case
0017               * (expr)
0017                 IDENTIFIER  ALWAYS_RE_CC
0017               * (code)
0017                   * (operation) !store
0017                       * (expr)
0017                         IDENTIFIER  outcome
0018                       * (expr)
0018                         NUMBER      true
0018           * (statement) !case
0019               * (expr)
0019                 IDENTIFIER  NEVER_RE_CC
0019               * (code)
0019                   * (statement) !case
0020                       * (expr)
0020                         IDENTIFIER  START_RE_CC
0020                       * (code)
0020                           * (statement) !if
0020                               * (subexpression)
0020                                   * (operation) !eq
0020                                       * (expr)
0020                                         IDENTIFIER  ipos
0020                                       * (expr)
0020                                         NUMBER      0
0020                               * (code)
0020                                   * (operation) !store
0020                                       * (expr)
0020                                         IDENTIFIER  outcome
0021                                       * (expr)
0021                                         NUMBER      true
0020           * (statement) !case
0022               * (expr)
0022                 IDENTIFIER  END_RE_CC
0022               * (code)
0022                   * (statement) !if
0022                       * (subexpression)
0022                           * (operation) !eq
0022                               * (call)
0022                                   * (expr)
0022                                     IDENTIFIER  BlkValueRead
0022                                   * (expr)
0022                                     IDENTIFIER  txt
0022                                   * (expr)
0022                                     IDENTIFIER  ipos
0022                               * (expr)
0022                                 NUMBER      0
0022                       * (code)
0022                           * (operation) !store
0022                               * (expr)
0022                                 IDENTIFIER  outcome
0023                               * (expr)
0023                                 NUMBER      true
0022           * (statement) !case
0024               * (expr)
0024                 IDENTIFIER  SOMETIMES_RE_CC
0024               * (code)
0024                   * (operation) !store
0024                       * (expr)
0024                         IDENTIFIER  outcome
0025                       * (expr)
0025                         NUMBER      true
=========
Test: parse schema from:
	print (char) 'a';
	print (char) ''';

0001   * (statement) !printchar
0001       * (expr)
0001         SQUOTED     a
0002   * (statement) !printchar
0002       * (expr)
0002         SQUOTED     '
=========
